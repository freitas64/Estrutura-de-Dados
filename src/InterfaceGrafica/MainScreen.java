/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;


import tp_ed_blogSocial.*;
import exception.EmptyCollectionException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Antonio Sanches 8070027
 * @author José Teixeira 8080328
 */
public class MainScreen extends javax.swing.JFrame {

    Rede netWork = new Rede();
    Iterator<User> it;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenFile = new javax.swing.JButton();
        editMap = new javax.swing.JButton();
        Destination = new javax.swing.JComboBox();
        Source = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cidadeTextArea = new javax.swing.JTextArea();
        search = new javax.swing.JButton();
        SearchCondition1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        Cidade = new javax.swing.JComboBox();
        searchCidade = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        principalTextArea1 = new javax.swing.JTextArea();
        all = new javax.swing.JButton();
        data = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        OpenFile.setText("Open File");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });

        editMap.setText("Edit Map");
        editMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMapActionPerformed(evt);
            }
        });

        Destination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DestinationActionPerformed(evt);
            }
        });

        jLabel1.setText("Amizade");

        cidadeTextArea.setEditable(false);
        cidadeTextArea.setRows(1);
        jScrollPane1.setViewportView(cidadeTextArea);

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        SearchCondition1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ver Amizade","Menor Proximidade","Maior Proximidade" }));
        SearchCondition1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCondition1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Pessoas Registadas por Cidade");

        Cidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CidadeActionPerformed(evt);
            }
        });

        searchCidade.setText("Pesquisar");
        searchCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCidadeActionPerformed(evt);
            }
        });

        principalTextArea1.setEditable(false);
        principalTextArea1.setColumns(20);
        principalTextArea1.setRows(5);
        jScrollPane3.setViewportView(principalTextArea1);

        all.setText("Imprime Tudo");
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });

        data.setText("ImprimeDados");
        data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataActionPerformed(evt);
            }
        });

        jButton1.setText("Open File Friend");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ver Relações");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Grafo Minimo Habitantes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(OpenFile)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(editMap))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchCondition1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(search)
                                .addGap(18, 18, 18)
                                .addComponent(all)
                                .addGap(18, 18, 18)
                                .addComponent(data))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Cidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchCidade)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addGap(0, 104, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenFile)
                    .addComponent(jButton1)
                    .addComponent(editMap))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCidade)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchCondition1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(all)
                        .addComponent(data))
                    .addComponent(search))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (!netWork.isEmpty()) {

                //instanciar network
                Rede temp = new Rede();
                this.netWork = temp;
            }
            boolean occurredErrors = false;
            try {
                occurredErrors = readFileAsString(file.getPath());

            } catch (Exception ex) {
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "File can´t be loaded");
            }
            loadLinks();
            loadCidades();

            if (occurredErrors) {
                JOptionPane.showMessageDialog(this, "File loaded but one or "
                        + "more errors occurred");
            }

        }
    }//GEN-LAST:event_OpenFileActionPerformed

    private void editMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMapActionPerformed
        this.setEnabled(false);
        new EditFriendScreen(this).setVisible(true);
    }//GEN-LAST:event_editMapActionPerformed

    private void DestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DestinationActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed

        boolean equals = false;

        if (Source.getSelectedIndex() == Destination.getSelectedIndex()) {

            JOptionPane.showMessageDialog(this, "Os amigos sao iguais");
            if (netWork.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Insert Map First");

            }
            equals = true;
        }

        if (!equals) {

            if (SearchCondition1.getSelectedItem().equals("Ver Amizade")) {
                System.out.println("####Ver Amizade####");
                System.out.println(netWork.toString());

                principalTextArea1.setText(null);

                principalTextArea1.append(Source.getSelectedItem().toString() + " e " + Destination.getSelectedItem().toString() + " estão registados: "
                        + netWork.isCaminho((User) Source.getSelectedItem(), (Pessoa) Destination.getSelectedItem()) + ".");

                System.out.println(Source.getSelectedItem().toString() + " e " + Destination.getSelectedItem().toString() + " estão registados no facebook: "
                        + netWork.isCaminho((User) Source.getSelectedItem(), (Pessoa) Destination.getSelectedItem()) + ".");
            }
            if (SearchCondition1.getSelectedItem().equals("Menor Proximidade")) {

                System.out.println("####Menor Proximidade####");
                System.out.println(netWork.toString());

                principalTextArea1.setText(null);

                String s = "";

                it = netWork.iteratorLongtPath((User) Source.getSelectedItem(), (Pessoa) Destination.getSelectedItem());

                while (it.hasNext()) {
                    s += it.next().getName() + "\t";
                }

                principalTextArea1.append("Menor Proximidade entre " + Source.getSelectedItem().toString() + " e " + Destination.getSelectedItem().toString() + "\n"
                        + s);

            }

            if (SearchCondition1.getSelectedItem().equals("Maior Proximidade")) {

                System.out.println("####Maior Proximidade####");
                System.out.println(netWork.toString());

                principalTextArea1.setText(null);

                String s1 = "";

                it = netWork.iteratorShortestPath((User) Source.getSelectedItem(), (Pessoa) Destination.getSelectedItem());

                while (it.hasNext()) {
                    s1 += it.next().getName() + "\t";
                }

                principalTextArea1.append("Maior Proximidade " + Source.getSelectedItem().toString() + " e " + Destination.getSelectedItem().toString() + "\n"
                        + s1);

            }

        }
    }//GEN-LAST:event_searchActionPerformed

    private void SearchCondition1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCondition1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchCondition1ActionPerformed

    private void CidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CidadeActionPerformed

    }//GEN-LAST:event_CidadeActionPerformed

    private void searchCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCidadeActionPerformed

        cidadeTextArea.setText(null);
        int result;
        result = netWork.numHabitantesCity(Cidade.getSelectedItem().toString());
        cidadeTextArea.append("Na cidade " + (String) Cidade.getSelectedItem() + " existem " + result + " pessoas registadas no facebook!");

    }//GEN-LAST:event_searchCidadeActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        principalTextArea1.setText(null);

        String s = netWork.imprimetudoString();

        principalTextArea1.append(s);
    }//GEN-LAST:event_allActionPerformed

    private void dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataActionPerformed

        principalTextArea1.setText(null);

        int k;

        String s1 = "Introduza o id da Pessoa\n";
        String s;

        User p;

        for (k = 0; k < netWork.size(); k++) {
            s1 += "" + netWork.getVertices()[k].getID() + "-" + netWork.getVertices()[k].getName();
            s1 += "\n";
        }

        String nome1 = JOptionPane.showInputDialog(s1);
        long id = Long.parseLong(nome1);

        p = netWork.getDataById(id);

        s = netWork.imprimeDadosSTring(p);

        principalTextArea1.append(s);

    }//GEN-LAST:event_dataActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
//            if (!netWork.isEmpty()) {
//
//                //instanciar network
//                Rede temp = new Rede();
//                this.netWork = temp;
//            }
            boolean occurredErrors = false;
            try {
                occurredErrors = readFileAsStringFriend(file.getPath());

            } catch (Exception ex) {
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "File can´t be loaded");
            }
            loadLinks();
            loadCidades();

            if (occurredErrors) {
                JOptionPane.showMessageDialog(this, "File loaded but one or "
                        + "more errors occurred");
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        cidadeTextArea.setText(null);

        String s = "";
        s = netWork.grafRelCity(Cidade.getSelectedItem().toString());
        cidadeTextArea.append(s);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cidadeTextArea.setText(null);

        String s1 = "Introduza o id da Pessoa\n";
        int k;

        User p;

        for (k = 0; k < netWork.size(); k++) {
            s1 += "" + netWork.getVertices()[k].getID() + "-" + netWork.getVertices()[k].getName();
            s1 += "\n";
        }

        String nome1 = JOptionPane.showInputDialog(s1);
        long id = Long.parseLong(nome1);

        p = netWork.getDataById(id);

        String s = "";

      //  City c;
        
//        System.out.println("\n---------------------------------------------------------------------------------------------------------------------------------\n");
//        System.out.println("\nGrafo Habitantes da cidade coiso: ");
//        try {
//            it = netWork.mstNetwork("Porto").iteratorBFS(p);
//            while (it.hasNext()) {
//            System.out.print(it.next().getNome() + "\t");
//
//        }
//        } catch (EmptyCollectionException ex) {
//            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
//        }

        

        try {
            it = netWork.mstNetwork(Cidade.getSelectedItem().toString()).iteratorBFS(p);
            while (it.hasNext()) {
                s += it.next().getName() + "\t";
            }
        } catch (EmptyCollectionException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        cidadeTextArea.append(s);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    /**
     * Reads the file content and adds this content in the StellarLabirynth,
     * besides verify if some error occurred with the content file
     *
     * @param filePath the path of the file that will be read
     * @return true if some error occurred with file content false otherwise
     * @throws Exception
     */
    public boolean readFileAsString(String filePath) throws Exception {
        if (filePath == null || filePath.trim().equals("")) {
            throw new Exception("Invalid file path.");
        }

        boolean result;

        User p;

        BufferedReader br = null;
        boolean error = false;
        try {
            br = new BufferedReader(new FileReader(filePath));
            String currentLine;

            int count = 1;
            while ((currentLine = br.readLine()) != null) {
                String[] tokens = currentLine.split(";");
                boolean correctVertex = false;
                boolean correctEdge = false;

                if (tokens.length == 3) {

                    String name = tokens[0];
                    String username = tokens[1];
                    String email = tokens[2];
                    long credits = Long.parseLong(tokens[3]);

                    p = new User(name, username, email, (int) credits);

                    netWork.addVertex(p);

                }
                count++;
            }

        } catch (Exception ex) {
            System.out.println(ex);

        } finally {
            br.close();
        }

        return error;
    }

    public boolean readFileAsStringFriend(String filePath) throws Exception {
        if (filePath == null || filePath.trim().equals("")) {
            throw new Exception("Invalid file path.");
        }

        boolean result;

        BufferedReader br = null;
        boolean error = false;
        try {
            br = new BufferedReader(new FileReader(filePath));
            String currentLine;

            int count = 1;
            while ((currentLine = br.readLine()) != null) {
                String[] tokens = currentLine.split(";");
                boolean correctVertex = false;
                boolean correctEdge = false;

                if (tokens.length == 2) {

                    int id1 = Integer.parseInt(tokens[0]);
                    int id2 = Integer.parseInt(tokens[1]);

                    long di1 = (long) id1;
                    long di2 = (long) id2;

                    netWork.addEdgeById(di1, di2);

                }
                count++;
            }

        } catch (Exception ex) {
            System.out.println(ex);

        } finally {
            br.close();
        }

        return error;
    }

    /**
     * Remove all vertices of the source and destination combo box and load the
     * new vertices that are in the network
     */
    public void loadLinks() {

        Source.removeAllItems();
        Destination.removeAllItems();

        for (int i = 0; i < this.netWork.size(); i++) {
            Source.addItem(netWork.getVertices()[i]);
            Destination.addItem(netWork.getVertices()[i]);
        }
    }

    public void loadCidades() {

        Cidade.removeAllItems();

        ArrayList<String> l = new ArrayList<>();

        for (int i = 0; i < this.netWork.size(); i++) {

            if (!l.contains(netWork.getVertices()[i].getCity())) {
                l.add(netWork.getVertices()[i].getCity());
                Cidade.addItem(netWork.getVertices()[i].getCity());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Cidade;
    private javax.swing.JComboBox Destination;
    private javax.swing.JButton OpenFile;
    private javax.swing.JComboBox SearchCondition1;
    private javax.swing.JComboBox Source;
    private javax.swing.JButton all;
    private javax.swing.JTextArea cidadeTextArea;
    private javax.swing.JButton data;
    private javax.swing.JButton editMap;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea principalTextArea1;
    private javax.swing.JButton search;
    private javax.swing.JButton searchCidade;
    // End of variables declaration//GEN-END:variables
}
