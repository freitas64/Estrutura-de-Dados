/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import exception.ElementNotFoundException;
import tp_ed_blogSocial.*;

import exception.EmptyCollectionException;
import exception.EmptyFieldsException;
import java.awt.TextField;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListModel;
import recursos.ArrayOrderedList;
import recursos.DoubleOrderedList;
import recursos.LinkedStack;
import tp_ed_blogSocial.Post.Privacy;
import tp_ed_blogSocial.RedeSocial.Ligacao;

/**
 *
 * @author Rui Freitas
 *
 */
public class MainScreen extends javax.swing.JFrame {

// only a configuration to the jScrollPane...
    RedeSocial netWork = new RedeSocial();
    Iterator<User> it;
    private MainScreen screen;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel4 = new javax.swing.JLabel();
        OpenFile = new javax.swing.JButton();
        OpenFriendshipsFileButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        RegisterUserButton = new javax.swing.JButton();
        DeleteUserButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        FriendShipRequestButton = new javax.swing.JButton();
        PublishButton = new javax.swing.JButton();
        showUserSelectedPosts = new javax.swing.JButton();
        showFriendPost = new javax.swing.JButton();
        Users = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        showFriendRequestButton = new javax.swing.JButton();
        openFilePostsButton = new javax.swing.JButton();
        showFriends = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BLOG SOCIAL");

        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("Abrir ficheiros de mapeamento");

        OpenFile.setText("Abrir mapa utilizadores");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });

        OpenFriendshipsFileButton.setText("Abrir ficheiro de amizades");
        OpenFriendshipsFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFriendshipsFileButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Opções/Editar Mapa");

        RegisterUserButton.setText("Registar(Utilizador)");
        RegisterUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterUserButtonActionPerformed(evt);
            }
        });

        DeleteUserButton.setText("Eliminar (Utilizador)");
        DeleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteUserButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Ver Relações");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RegisterUserButton)
                    .addComponent(DeleteUserButton))
                .addGap(0, 4, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterUserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DeleteUserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jLabel5.setText("-------------------------------------------------------------------------------");

        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("Opções de utilizador");

        jLabel9.setText("Selecionar Utilizador");

        FriendShipRequestButton.setText("Fazer pedido de amizade");
        FriendShipRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FriendShipRequestButtonActionPerformed(evt);
            }
        });

        PublishButton.setText("Publicar ");
        PublishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublishButtonActionPerformed(evt);
            }
        });

        showUserSelectedPosts.setText("Ver as minhas publicações");
        showUserSelectedPosts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserSelectedPostsActionPerformed(evt);
            }
        });

        showFriendPost.setText("Ver Publicações de outro utilizador");
        showFriendPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFriendPostActionPerformed(evt);
            }
        });

        Users.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsersActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setRows(1);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );

        showFriendRequestButton.setText("Ver pedidos de amizade");
        showFriendRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFriendRequestButtonActionPerformed(evt);
            }
        });
        showFriendRequestButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showFriendRequestButtonKeyPressed(evt);
            }
        });

        openFilePostsButton.setText("Abrir ficheiro de publicações");
        openFilePostsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilePostsButtonActionPerformed(evt);
            }
        });

        showFriends.setText("Ver amigos");
        showFriends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFriendsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(559, 559, 559))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(Users, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(showFriendPost)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(showFriendRequestButton))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(FriendShipRequestButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(PublishButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(showUserSelectedPosts))
                                            .addComponent(showFriends))
                                        .addGap(43, 43, 43)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(OpenFile)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(OpenFriendshipsFileButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(openFilePostsButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OpenFile)
                            .addComponent(OpenFriendshipsFileButton)
                            .addComponent(openFilePostsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Users, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(FriendShipRequestButton)
                                    .addComponent(PublishButton)
                                    .addComponent(showUserSelectedPosts))
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(showFriendPost)
                                    .addComponent(showFriendRequestButton)))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 36, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(770, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(showFriends)
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (!netWork.isEmpty()) {

                //instanciar network
                RedeSocial temp = new RedeSocial();
                this.netWork = temp;
            }
            boolean occurredErrors = false;
            try {
                occurredErrors = readFileAsString(file.getPath());

            } catch (Exception ex) {
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "File can´t be loaded");
            }
            loadLinks();
            loadUsers();

            if (occurredErrors) {
                JOptionPane.showMessageDialog(this, "File loaded but one or "
                        + "more errors occurred");
            }

        }
    }//GEN-LAST:event_OpenFileActionPerformed

    private void UsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsersActionPerformed

    }//GEN-LAST:event_UsersActionPerformed

    private void OpenFriendshipsFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFriendshipsFileButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            boolean occurredErrors = false;
            try {
                occurredErrors = readFileAsStringFriend(file.getPath());

            } catch (Exception ex) {
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "File can´t be loaded");
            }
            loadLinks();
            loadUsers();

            if (occurredErrors) {
                JOptionPane.showMessageDialog(this, "File loaded but one or "
                        + "more errors occurred");
            }

        }
    }//GEN-LAST:event_OpenFriendshipsFileButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        textArea.setText(null);

        String s = "";
        s = netWork.toString();
        textArea.append(s);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void RegisterUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterUserButtonActionPerformed
        int creditos = 10;
        String nome = JOptionPane.showInputDialog("Inserir Nome");
        if ((nome != null) && (nome.length() > 0)) {
            String email = JOptionPane.showInputDialog("Inserir Email");
            if ((email != null) && (email.length() > 0)) {
                String username = JOptionPane.showInputDialog("Inserir Username");
                if ((username != null) && (username.length() > 0)) {
                    User user = new User(nome, email, username, creditos);
                    this.netWork.addVertex(user);
                    try {
                        String filename = "Map.txt";
                        FileWriter fw = new FileWriter(filename, true); //the true will append the new data
                        fw.write(nome + ";" + email + ";" + username + ";" + creditos + "\n");//appends the string to the file
                        fw.close();
                    } catch (IOException ioe) {
                        System.err.println("IOException: " + ioe.getMessage());
                    }
                    this.loadLinks();
                    this.loadUsers();

                } else {
                    new MainScreen();
                }
            } else {
                new MainScreen();
            }

        } else {
            new MainScreen();
        }


    }//GEN-LAST:event_RegisterUserButtonActionPerformed

    private void DeleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteUserButtonActionPerformed
        int i;
        String s = "Introduza o ID da Pessoa\n";
        String linhaRemover = null;
        if (this.netWork.size() == 0) {
            JOptionPane.showMessageDialog(this, "Não existem utilizadores para remover", "Alerta", JOptionPane.WARNING_MESSAGE);

        } else {
            for (i = 0; i < this.netWork.size(); i++) {
                s += "" + this.netWork.getVertices()[i].getID() + "-" + this.netWork.getVertices()[i].getName();
                s += "\n";
                linhaRemover = this.netWork.getVertices()[i].getName() + ";" + this.netWork.getVertices()[i].getEmail()
                        + ";" + this.netWork.getVertices()[i].getUsername() + ";" + this.netWork.getVertices()[i].getCredits();
            }

            String nome = JOptionPane.showInputDialog(s);

            long id = Long.parseLong(nome);

            this.netWork.removeVertexById(id);

            /**
             * remover a linha do ficheiro Map.txt
             */
            File inputFile = new File("Map.txt");
            File tempFile = new File("Map_temp.txt");

            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new FileReader(inputFile));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedWriter writer = null;
            try {
                writer = new BufferedWriter(new FileWriter(tempFile));
            } catch (IOException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

            String lineToRemove = linhaRemover;
            String currentLine;

            try {
                while ((currentLine = reader.readLine()) != null) {
                    // trim newline when comparing with lineToRemove
                    String trimmedLine = currentLine.trim();
                    if (trimmedLine.equals(lineToRemove)) {
                        continue;
                    }
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            } catch (IOException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean successful = tempFile.renameTo(inputFile);

            this.loadUsers();
            this.loadLinks();
        }

    }//GEN-LAST:event_DeleteUserButtonActionPerformed

    private void FriendShipRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FriendShipRequestButtonActionPerformed
        int i;
        String s = "Introduza o ID da Pessoa\n";
        Ligacao tipo;
        int respostaPatrocinado;
        int custoPedido;

        String idtemp = (String) Users.getSelectedItem();
        String[] tokens = idtemp.split("-");
        long id = Long.parseLong(tokens[0]);
        User usertemp = this.netWork.getDataById(id);
        ArrayOrderedList<User> arrayUser = new ArrayOrderedList<>();

        for (i = 0; i < this.netWork.size(); i++) {
            User u = this.netWork.getVertices()[i];
            arrayUser.add(u);

        }
        try {
            arrayUser.remove(usertemp);
        } catch (EmptyCollectionException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ElementNotFoundException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        Iterator it = arrayUser.iterator();
        User p;
        while (it.hasNext()) {
            p = (User) it.next();
            s += "" + p.getID() + "-" + p.getName();
            s += "\n";

        }
        String nome = JOptionPane.showInputDialog(s);
        if (nome == null) {
            this.setEnabled(true);
            this.toFront();
            this.loadLinks();
        } else {
            long id2 = Long.parseLong(nome);

            User user1 = this.netWork.getDataById(id);
            User target = this.netWork.getDataById(id2);

            tipo = this.netWork.verificarPedidoGrafica(user1, target);

            if (tipo == Ligacao.Amigo) {
                JOptionPane.showMessageDialog(this, "Já são amigos");

            } else {
                if (tipo == Ligacao.AmigoDeAmigo) {

                    JOptionPane.showMessageDialog(this, "Pedido de amizade efetuado com sucesso");

                } else {
                    if (tipo == Ligacao.Patrocinado) {
                        custoPedido = this.netWork.calcularCredito(user1, target) - 1;
                        respostaPatrocinado = JOptionPane.showConfirmDialog(this, "Apenas pode fazer pedido patrocinado!! \n"
                                + "Deseja fazer pedido patrocinado?(Custo: " + custoPedido + " créditos)",
                                "Amizade", JOptionPane.YES_NO_OPTION);
                        if (respostaPatrocinado == JOptionPane.NO_OPTION) {
                            JOptionPane.showMessageDialog(null, "Cancelou pedido patrocinado");

                        } else {
                            String emailInput = JOptionPane.showInputDialog("Inserir email do utilizador");
                            String usernameInput = JOptionPane.showInputDialog("Inserir username do utilizador");
                            if (emailInput.equals(target.getEmail()) && usernameInput.equals(target.getUsername())) {
                                target.adicionarPedido(user1);
                                user1.setCredits(user1.getCredits() - custoPedido);
                                JOptionPane.showMessageDialog(this, "Pedido de amizade efetuado com sucesso\n"
                                        + "Foram-lhe retirados " + custoPedido + " créditos");

                            } else {
                                JOptionPane.showMessageDialog(this, " E-Mail ou Username inválidos");

                            }
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Não há ligação possível");
                    }
                }
            }
        }


    }//GEN-LAST:event_FriendShipRequestButtonActionPerformed

    private void PublishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublishButtonActionPerformed
        Calendar date;
        Privacy privacy;
        String idtemp = (String) Users.getSelectedItem();
        String[] tokens = idtemp.split("-");
        String texto ="Escolha a privacidade da mensagem. Insira 1(privada) ou 2(publica)";
        long id = Long.parseLong(tokens[0]);
        User user = this.netWork.getDataById(id);
        String titulo = JOptionPane.showInputDialog("Insira o título da publicação");
        String corpoPublicação = JOptionPane.showInputDialog("Insira o corpo da publicação");
        SimpleDateFormat sdf = new SimpleDateFormat("dd MMMM yyy HH:mm");
        date = Calendar.getInstance();
        String privacidade = JOptionPane.showInputDialog(texto);
        int opcao = Integer.parseInt(privacidade);
        
        if (opcao == 1) {
            privacy = Privacy.privada;
            Post post = new Post(corpoPublicação, titulo, date, privacy);
            user.publicarPost(post);            
            this.netWork.alcanceMensagem(user, post);
            JOptionPane.showMessageDialog(this, "Publicado com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            textArea.setText("");
            textArea.append("Alcance privado para os utilizadores\n");
            textArea.append(this.netWork.alcanceMensagem(user, post));

        } else {
            if (opcao == 2) {
            privacy = Privacy.publica;
            Post post = new Post(corpoPublicação, titulo, date, privacy);
            user.publicarPost(post);            
            this.netWork.alcanceMensagem(user, post);
            JOptionPane.showMessageDialog(this, "Publicado com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            textArea.setText("");
            textArea.append("Alcance privado para os utilizadores\n");
            textArea.append(this.netWork.alcanceMensagem(user, post));

        } else{
                JOptionPane.showMessageDialog(this, "Opção Inválida", "Erro", JOptionPane.WARNING_MESSAGE);
            
            }
            
        }
    }//GEN-LAST:event_PublishButtonActionPerformed

    private void showFriendRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFriendRequestButtonActionPerformed

        String idtemp = (String) Users.getSelectedItem();
        String[] tokens = idtemp.split("-");
        long id = Long.parseLong(tokens[0]);
        User user = this.netWork.getDataById(id);
        ArrayOrderedList<User> arrayUser = user.getPedidos();
        if (arrayUser.isEmpty() == true) {
            JOptionPane.showMessageDialog(this, "Não tem nenhum pedido", "INFO", JOptionPane.INFORMATION_MESSAGE);
        } else {

            String s = "Introduza o ID da Pessoa que deseja aceitar pedido\n";

            try {
                arrayUser.remove(user);
            } catch (EmptyCollectionException | ElementNotFoundException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            Iterator it = arrayUser.iterator();
            User p;
            while (it.hasNext()) {
                p = (User) it.next();
                s += "" + p.getID() + "-" + p.getName();
                s += "\n";

            }
            String nome = JOptionPane.showInputDialog(s);
            long id2 = Long.parseLong(nome);
            User newfriend = this.netWork.getDataById(id2);
            try {
                this.netWork.aceitarPedido(user, newfriend);
                JOptionPane.showMessageDialog(this, "Parabéns. O utilizador " + user.getName()
                        + " e o utlizador " + newfriend.getName() + " agora são amigos");

            } catch (ElementNotFoundException | EmptyCollectionException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_showFriendRequestButtonActionPerformed

    private void showFriendRequestButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showFriendRequestButtonKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_showFriendRequestButtonKeyPressed

    private void showUserSelectedPostsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserSelectedPostsActionPerformed
        String idtemp = (String) Users.getSelectedItem();
        String[] tokens = idtemp.split("-");
        long id = Long.parseLong(tokens[0]);
        User user = this.netWork.getDataById(id);
        Calendar date = Calendar.getInstance();
       
        
        if (user.getPosts().isEmpty() == true) {
            JOptionPane.showMessageDialog(this, "Não tem nenhuma publicação", "INFO", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String s = "";
            
            Iterator<Post> itPosts;
            itPosts = user.getPosts().iterator();
            Post p ;
            textArea.setText("");
            textArea.append("Publicações de "+user.getName()+"\n---------------------------------------------\n");
            
            while (itPosts.hasNext()) {
              
               p  =  itPosts.next();
                
                  textArea.append( "\nTítulo: " + p.getTitle()+ "\nCorpo: " + p.getPost()+"\nData: "+p.getDate()+"\nPrivacidade: "+p.getPrivacy()+"\n");
                  textArea.append( "Comentários:");
                
                p.ComentarPost(new Comment(date, "Comentario 1", new User("Hugo", "hugo@email.com", "hugoreis", 10)));
                p.ComentarPost(new Comment(date, "Comentario 2", new User("Sofia", "sofia@mail.com", "sofiasousa", 10)));
                
                Iterator<Comment> itComment;
                itComment = p.getComments().iterator();
                while(!itComment.hasNext()){
                Comment c;
                c =  (Comment) itComment.next();
                
                textArea.append("\n\tComentário:" + c.getComment());
                textArea.append("\n\tData:" + c.getDate());
                textArea.append("\n\tUtilizador:"+c.getUser().getName());
                textArea.append("\n\t------------------------------------------");
               
      }
               
                 
                
            }
            
            
            
              
            
            
        }
        
        
    }//GEN-LAST:event_showUserSelectedPostsActionPerformed

    private void showFriendPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFriendPostActionPerformed
        int i;
        String idtemp = (String) Users.getSelectedItem();
        String[] tokens = idtemp.split("-");
        long id1 = Long.parseLong(tokens[0]);
        User user1 = this.netWork.getDataById(id1);
        boolean ligacao;
       
        String s = "Introduza o ID da Pessoa\n";
       
        if (this.netWork.size() == 0) {
            JOptionPane.showMessageDialog(this, "Não existem utilizadores para remover", "Alerta", JOptionPane.WARNING_MESSAGE);

        } else {
            ArrayOrderedList<User> arrayUser = new ArrayOrderedList<>();

        for (i = 0; i < this.netWork.size(); i++) {
            User u = this.netWork.getVertices()[i];
            arrayUser.add(u);

        }
            try {
                arrayUser.remove(user1);
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ElementNotFoundException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        Iterator it = arrayUser.iterator();
        User u;
        while (it.hasNext()) {
            u = (User) it.next();
            s += "" + u.getID() + "-" + u.getName();
            s += "\n";

        }

            String nome = JOptionPane.showInputDialog(s);

            long id2 = Long.parseLong(nome);
            User user2 = this.netWork.getDataById(id2);
            ligacao = this.netWork.isCaminhoTf(user1, user2);
            if(ligacao == true){
                Iterator<Post> itPosts;
                itPosts = user2.getPosts().iterator();
               
            textArea.setText("");
            textArea.append("Publicções de "+user2.getName());
            while (itPosts.hasNext()) {
              Post p = itPosts.next();
              
               textArea.append( "\nTítulo: " + p.getTitle()+ "\nCorpo: " + p.getPost()+"\nData: "+p.getDate()+"\nPrivacidade: "+p.getPrivacy()+"\n");
             
            }
            }else{
                Iterator<Post> itPosts;
                itPosts = user2.getPosts().iterator();
               
                textArea.setText("");
                textArea.append("Publicções de "+user2.getName());
            while (itPosts.hasNext()) {
              Post p = itPosts.next();
                if(p.getPrivacy() == Privacy.publica){
                    textArea.append( "\nTítulo: " + p.getTitle()+ "\nCorpo: " + p.getPost()+"\nData: "+p.getDate()+"\nPrivacidade: "+p.getPrivacy()+"\n");
                } 
            }
            
            
        }
        }
    }//GEN-LAST:event_showFriendPostActionPerformed

    private void openFilePostsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilePostsButtonActionPerformed
       JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            boolean occurredErrors = false;
            try {
                occurredErrors = readPostsFileAsString(file.getPath());

            } catch (Exception ex) {
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "File can´t be loaded");
            }
            

            if (occurredErrors) {
                JOptionPane.showMessageDialog(this, "File loaded but one or "
                        + "more errors occurred");
            }

        }
    }//GEN-LAST:event_openFilePostsButtonActionPerformed

    private void showFriendsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFriendsActionPerformed
        String idtemp = (String)Users.getSelectedItem();
        String[] tokens = idtemp.split("-");
        long id1 = Long.parseLong(tokens[0]);
        User user1 = this.netWork.getDataById(id1);
        this.netWork.imprimeDados(user1);
    }//GEN-LAST:event_showFriendsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainScreen main = new MainScreen();
                main.setVisible(true);

            }

        });

    }

    /**
     * Reads the file content and adds this content in the StellarLabirynth,
     * besides verify if some error occurred with the content file
     *
     * @param filePath the path of the file that will be read
     * @return true if some error occurred with file content false otherwise
     * @throws Exception
     */
    public boolean readFileAsString(String filePath) throws Exception {
        if (filePath == null || filePath.trim().equals("")) {
            throw new Exception("Invalid file path.");
        }

        boolean result;

        User u;

        BufferedReader br = null;
        boolean error = false;
        try {
            br = new BufferedReader(new FileReader(filePath));
            String currentLine;

            int count = 1;
            while ((currentLine = br.readLine()) != null) {
                String[] tokens = currentLine.split(";");
                boolean correctVertex = false;
                boolean correctEdge = false;

                if (tokens.length == 4) {

                    String nome = tokens[0];
                    String email = tokens[1];
                    String username = tokens[2];
                    int creditos = Integer.parseInt(tokens[3]);

                    u = new User(nome, email, username, creditos);

                    netWork.addVertex(u);

                }
                count++;
            }

        } catch (Exception ex) {
            System.out.println(ex);

        } finally {
            br.close();
        }

        return error;
    }

    public boolean readFileAsStringFriend(String filePath) throws Exception {
        if (filePath == null || filePath.trim().equals("")) {
            throw new Exception("Invalid file path.");
        }

        boolean result;

        BufferedReader br = null;
        boolean error = false;
        try {
            br = new BufferedReader(new FileReader(filePath));
            String currentLine;

            int count = 1;
            while ((currentLine = br.readLine()) != null) {
                String[] tokens = currentLine.split(";");
                boolean correctVertex = false;
                boolean correctEdge = false;

                if (tokens.length == 2) {

                    int id1 = Integer.parseInt(tokens[0]);
                    int id2 = Integer.parseInt(tokens[1]);

                    long di1 = (long) id1;
                    long di2 = (long) id2;

                    netWork.addEdgeById(di1, di2);

                }
                count++;
            }

        } catch (Exception ex) {
            System.out.println(ex);

        } finally {
            br.close();
        }

        return error;
    }
    
     public boolean readPostsFileAsString(String filePath) throws Exception {
        if (filePath == null || filePath.trim().equals("")) {
            throw new Exception("Invalid file path.");
        }

        boolean result;

        BufferedReader br = null;
        boolean error = false;
        try {
            br = new BufferedReader(new FileReader(filePath));
            String currentLine;
            String corpoPost;
            String tituloPost;
            Calendar date;
            Privacy privacidadePost;
            User user;
            Post post;

            int count = 1;
            while ((currentLine = br.readLine()) != null) {
                String[] tokens = currentLine.split(";");
                boolean correctVertex = false;
                boolean correctEdge = false;

                if (tokens.length == 4) {
                    corpoPost = tokens[0];
                    tituloPost = tokens[1];
                    int privacidadeFile=Integer.parseInt(tokens[2]);
                    date = Calendar.getInstance();
                    if (privacidadeFile == 0){
                        privacidadePost= Privacy.privada;
                    }else{
                        privacidadePost = Privacy.publica;
                    }
                    long userID = Long.parseLong(tokens[3]);
                    user = netWork.getDataById(userID);
                    
                    post = new Post(corpoPost, tituloPost, date, privacidadePost);
                    user.publicarPost(post);

                }
                count++;
            }

        } catch (Exception ex) {
            System.out.println(ex);

        } finally {
            br.close();
        }

        return error;
    }

    /**
     * Remove all vertices of the source and destination combo box and load the
     * new vertices that are in the network
     */
    public void loadLinks() {

        
        Users.removeAllItems();

        for (int i = 0; i < this.netWork.size(); i++) {

            Users.addItem(netWork.getVertices()[i].getID() + "-" + netWork.getVertices()[i].getName());
            
        }
    }

    public void loadUsers() {

        Users.removeAllItems();

        ArrayList<User> l = new ArrayList<>();

        for (int i = 0; i < this.netWork.size(); i++) {

            if (!l.contains(netWork.getVertices()[i])) {
                l.add(netWork.getVertices()[i]);
                Users.addItem(netWork.getVertices()[i].getID() + "-" + netWork.getVertices()[i].getName());

            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteUserButton;
    private javax.swing.JButton FriendShipRequestButton;
    private javax.swing.JButton OpenFile;
    private javax.swing.JButton OpenFriendshipsFileButton;
    private javax.swing.JButton PublishButton;
    private javax.swing.JButton RegisterUserButton;
    private javax.swing.JComboBox Users;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton openFilePostsButton;
    private javax.swing.JButton showFriendPost;
    private javax.swing.JButton showFriendRequestButton;
    private javax.swing.JButton showFriends;
    private javax.swing.JButton showUserSelectedPosts;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
